Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

// Non Recursive

// Execute for each letter using reduce
letterArray = string.split('')
function letterCount = letterArray.reduce(function(count, letter) {
	count[letter] = (count[letter] || 0 ) + 1
	return count.stringify()
}, {}
}

// Recursive
function recursiveCompressor(array){
counter = 0
let countofletters hash {a = > 0, b =>0, c=> 0	
const splitArray = string.split('')
if string.length = counter
	if string.length - 2 != string.length - 1 
    	return  modifiedArray.push(string[string.length]-1)
else
if string.length !=counter
counter ++
let modifiedArray = splitArray.map(e = > e.value(of key in hash) +=1`)
hash {a = > 0, b =>0, c=> 0, d=>}
return object =`(hash.key(a).concat(hash.value(a)))+(hash.key(a).concat(hash.value(b))
recursiveCompressor(object}		
{ 
}
recursiveCompressor(modifiedArray)